/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {
	behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		// custom layer tap because &lt did not work very well for me
		lm: layer_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_MODS";
			#binding-cells = <2>;
			tapping_term_ms = <200>;
			quick_tap_ms = <0>;
			flavor = "hold-preferred";
			bindings = <&mo>, <&kp>;
		};
    };
	keymap {
		compatible = "zmk,keymap";

		default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   \   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   /   | SHIFT |
// | LCTL  | LGUI  | LALT |  GRAV |  | EQL | DEL | BKSP|  | RET | SPC  | LBKT |  RBKT  | LBKT | HOME  |   END |
			bindings = <
&kp ESCAPE  &kp Q     &kp W     &kp E     &kp R     &kp T                        &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BACKSPACE
&kp TAB  &hm LEFT_CONTROL A     &hm LEFT_ALT S     &hm LEFT_SHIFT D     &hm LEFT_GUI F     &kp G                        &kp H     &hm RIGHT_GUI J     &hm RIGHT_SHIFT K     &hm RIGHT_ALT L     &hm RIGHT_CONTROL SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT &kp Z     &kp X     &kp C     &kp V     &kp B                        &kp N     &kp M     &kp COMMA  &kp PERIOD   &mt LEFT_SHIFT SLASH  &kp RETURN
&kp C_PLAY &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_GUI  &lm 1 LG(V)    &lt 3 SPACE                      &lt 3 SPACE   &mo 2     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW
			>;
		};
		lower_layer {
			bindings = <
&kp TILDE   &kp EXCLAMATION     &kp AT     &kp HASH     &kp DOLLAR     &kp PERCENT          &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&trans    &kp LG(TILDE)    &trans    &trans    &trans    &trans                                    &trans    &kp UNDERSCORE &kp PLUS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp PIPE
&trans    &trans    &trans    &trans    &kp LA(LG(BACKSLASH))    &trans                                    &trans   &trans   &trans    &trans    &trans    &trans
&kp CAPSLOCK    &trans    &out OUT_BLE    &bt BT_CLR  &trans  &trans                                    &trans   &trans   &trans    &trans    &trans    &kp C_NEXT    
			>;
		};

		raise_layer {
			bindings = <
&kp GRAVE &kp NUMBER_1 &kp NUMBER_2 &kp NUMBER_3 &kp NUMBER_4 &kp NUMBER_5                  &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8 &kp NUMBER_9 &kp NUMBER_0 &kp DELETE
&trans   &trans   &trans    &trans    &trans    &trans                      &trans    &kp MINUS &kp EQUAL   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans   &trans   &trans    &trans    &trans    &trans       			    &trans    &trans   &trans    &trans    &trans    &trans
&trans   &trans   &trans    &trans    &trans    &trans                      &trans    &trans   &trans    &trans    &trans    &kp C_NEXT
			>;
		};

		arrow_layer {
			bindings = <
&trans   &trans   &trans    &trans    &trans    &trans       			    &trans    &trans   &trans    &trans    &trans    &trans
&trans   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW    &trans                      &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans   &trans   &trans    &trans    &trans    &trans       			    &trans    &trans   &trans    &trans    &trans    &trans
&trans   &trans   &trans    &trans    &trans    &trans                      &trans    &trans   &trans    &trans    &trans    &kp C_NEXT
			>;
		};
	};
};
